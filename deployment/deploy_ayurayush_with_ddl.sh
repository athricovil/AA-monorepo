#!/bin/bash

# === AyurAyush End-to-End Deployment Script ===
# Sets up Spring Boot backend, Flutter frontend, PostgreSQL, and NGINX
# Securely injects jwt.secret and jwt.expirationMs via JVM -D options

set -e

# --- Configurable Variables ---
PROJECT_DIR="/root"
SPRING_BACKEND_REPO="https://github.com/athricovil/AAbackend.git"
FLUTTER_FRONTEND_REPO="https://github.com/athricovil/AA.git"
DB_NAME="ayurdb"
DB_USER="ayuruser"
DB_PASS="ayurpass"
# JWT_SECRET=$(openssl rand -base64 32)
JWT_SECRET="0BVrrTNJBB2+hHcx3yb+C8hGBl2HKALYEzx0CZpFbKSzyeSuaUwbgdU6JBcrwkvkPG0HagKrlf7dpRh+TKzVTQ=="
JWT_EXPIRATION_MS="86400000"  # 24 hours
# CORS_ALLOWED_ORIGIN_PATTERNS="http://localhost:*,http://104.211.241.125,http://4.247.29.42,http://135.13.28.43"
CORS_ALLOWED_ORIGIN_PATTERNS="http://0.0.0.0:*,http://localhost:*,http://127.0.0.1:*,"

# --- [0/10] Stop and disable existing services ---
echo "[0/10] Stopping existing aabackend and aafrontend services..."

sudo systemctl stop aabackend.service 2>/dev/null || true
sudo systemctl disable aabackend.service 2>/dev/null || true
sudo rm -f /etc/systemd/system/aabackend.service

sudo systemctl stop aafrontend.service 2>/dev/null || true
sudo systemctl disable aafrontend.service 2>/dev/null || true
sudo rm -f /etc/systemd/system/aafrontend.service

sudo systemctl daemon-reexec
sudo systemctl daemon-reload

# --- [1/10] Install Dependencies ---
echo "[1/10] Installing system dependencies..."
sudo apt update && sudo apt upgrade -y
sudo apt install -y openjdk-17-jdk maven git nginx postgresql postgresql-contrib unzip curl xz-utils libglu1-mesa

# --- [2/10] Set Up PostgreSQL ---
echo "[2/10] Setting up PostgreSQL..."
sudo -u postgres psql -tc "SELECT 1 FROM pg_database WHERE datname = '$DB_NAME'" | grep -q 1 || sudo -u postgres psql -c "CREATE DATABASE $DB_NAME;"
sudo -u postgres psql -tc "SELECT 1 FROM pg_roles WHERE rolname = '$DB_USER'" | grep -q 1 || sudo -u postgres psql -c "CREATE USER $DB_USER WITH ENCRYPTED PASSWORD '$DB_PASS';"
sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;"

# --- [2.1/10] Create complete application tables ---
echo "[2.1/10] Creating complete DB schema..."
sudo -u postgres psql -d $DB_NAME <<'EOF'
-- Users table (enhanced)
CREATE TABLE IF NOT EXISTS public.users
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    password varchar(255) NOT NULL,
    phone varchar(15),
    phone_verified boolean DEFAULT false,
    role varchar(255) NOT NULL DEFAULT 'USER',
    username varchar(50) NOT NULL,
    whatsapp varchar(15),
    email varchar(255),
    created_at timestamp DEFAULT CURRENT_TIMESTAMP,
    last_login timestamp,
    is_active boolean DEFAULT true,
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT ukdu5v5sr43g5bfnji4vb8hg5s3 UNIQUE (phone),
    CONSTRAINT ukr43af9ap4edm43mmtq01oddj6 UNIQUE (username)
);
ALTER TABLE public.users OWNER TO $DB_USER;

-- Products table (enhanced)
CREATE TABLE IF NOT EXISTS public.products
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name varchar(255) NOT NULL,
    description text,
    price numeric(38,2) NOT NULL,
    image_url varchar(255),
    created_at timestamp DEFAULT CURRENT_TIMESTAMP,
    rating numeric(38,2) DEFAULT 0.0,
    stock_quantity integer DEFAULT 0,
    is_active boolean DEFAULT true,
    category varchar(100),
    tags text[],
    CONSTRAINT products_pkey PRIMARY KEY (id)
);
ALTER TABLE public.products OWNER TO $DB_USER;

-- Cart items table
CREATE TABLE IF NOT EXISTS public.cart_items
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    user_id bigint NOT NULL,
    product_id bigint NOT NULL,
    quantity integer NOT NULL DEFAULT 1,
    added_at timestamp DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT cart_items_pkey PRIMARY KEY (id),
    CONSTRAINT cart_items_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products (id),
    CONSTRAINT cart_items_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users (id)
);
ALTER TABLE public.cart_items OWNER TO $DB_USER;

-- Orders table
CREATE TABLE IF NOT EXISTS public.orders
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    user_id bigint NOT NULL,
    order_number varchar(50) UNIQUE NOT NULL,
    total_amount numeric(38,2) NOT NULL,
    status varchar(50) DEFAULT 'PENDING',
    payment_status varchar(50) DEFAULT 'PENDING',
    payment_method varchar(50),
    shipping_address text,
    billing_address text,
    created_at timestamp DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT orders_pkey PRIMARY KEY (id),
    CONSTRAINT orders_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users (id)
);
ALTER TABLE public.orders OWNER TO $DB_USER;

-- Order items table
CREATE TABLE IF NOT EXISTS public.order_items
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    order_id bigint NOT NULL,
    product_id bigint NOT NULL,
    quantity integer NOT NULL,
    unit_price numeric(38,2) NOT NULL,
    total_price numeric(38,2) NOT NULL,
    CONSTRAINT order_items_pkey PRIMARY KEY (id),
    CONSTRAINT order_items_order_id_fkey FOREIGN KEY (order_id) REFERENCES public.orders (id),
    CONSTRAINT order_items_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products (id)
);
ALTER TABLE public.order_items OWNER TO $DB_USER;

-- Questionnaires table
CREATE TABLE IF NOT EXISTS public.questionnaires
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    user_id bigint NOT NULL,
    order_id bigint NOT NULL,
    questions text NOT NULL,
    answers text NOT NULL,
    created_at timestamp DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT questionnaires_pkey PRIMARY KEY (id),
    CONSTRAINT questionnaires_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users (id),
    CONSTRAINT questionnaires_order_id_fkey FOREIGN KEY (order_id) REFERENCES public.orders (id)
);
ALTER TABLE public.questionnaires OWNER TO $DB_USER;

-- Appointments table
CREATE TABLE IF NOT EXISTS public.appointments
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    user_id bigint NOT NULL,
    order_id bigint,
    appointment_date timestamp NOT NULL,
    duration_minutes integer DEFAULT 15,
    status varchar(50) DEFAULT 'SCHEDULED',
    notes text,
    doctor_id bigint,
    created_at timestamp DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT appointments_pkey PRIMARY KEY (id),
    CONSTRAINT appointments_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users (id),
    CONSTRAINT appointments_order_id_fkey FOREIGN KEY (order_id) REFERENCES public.orders (id)
);
ALTER TABLE public.appointments OWNER TO $DB_USER;

-- Shipping table
CREATE TABLE IF NOT EXISTS public.shipping
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    order_id bigint NOT NULL,
    tracking_number varchar(100),
    carrier varchar(100),
    status varchar(50) DEFAULT 'PENDING',
    shipped_at timestamp,
    delivered_at timestamp,
    shipping_address text NOT NULL,
    created_at timestamp DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT shipping_pkey PRIMARY KEY (id),
    CONSTRAINT shipping_order_id_fkey FOREIGN KEY (order_id) REFERENCES public.orders (id)
);
ALTER TABLE public.shipping OWNER TO $DB_USER;

-- Product reviews table
CREATE TABLE IF NOT EXISTS public.product_reviews
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    product_id bigint NOT NULL,
    user_id bigint NOT NULL,
    rating integer NOT NULL CHECK (rating >= 1 AND rating <= 5),
    review_text text,
    is_approved boolean DEFAULT false,
    created_at timestamp DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT product_reviews_pkey PRIMARY KEY (id),
    CONSTRAINT product_reviews_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products (id),
    CONSTRAINT product_reviews_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users (id)
);
ALTER TABLE public.product_reviews OWNER TO $DB_USER;

-- Admin actions log table
CREATE TABLE IF NOT EXISTS public.admin_actions
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    admin_user_id bigint NOT NULL,
    action_type varchar(100) NOT NULL,
    action_details text,
    target_user_id bigint,
    target_order_id bigint,
    created_at timestamp DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT admin_actions_pkey PRIMARY KEY (id),
    CONSTRAINT admin_actions_admin_user_id_fkey FOREIGN KEY (admin_user_id) REFERENCES public.users (id),
    CONSTRAINT admin_actions_target_user_id_fkey FOREIGN KEY (target_user_id) REFERENCES public.users (id),
    CONSTRAINT admin_actions_target_order_id_fkey FOREIGN KEY (target_order_id) REFERENCES public.orders (id)
);
ALTER TABLE public.admin_actions OWNER TO $DB_USER;

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_orders_user_id ON public.orders(user_id);
CREATE INDEX IF NOT EXISTS idx_orders_status ON public.orders(status);
CREATE INDEX IF NOT EXISTS idx_appointments_user_id ON public.appointments(user_id);
CREATE INDEX IF NOT EXISTS idx_appointments_date ON public.appointments(appointment_date);
CREATE INDEX IF NOT EXISTS idx_shipping_order_id ON public.shipping(order_id);
CREATE INDEX IF NOT EXISTS idx_product_reviews_product_id ON public.product_reviews(product_id);
CREATE INDEX IF NOT EXISTS idx_admin_actions_admin_user_id ON public.admin_actions(admin_user_id);
EOF

# --- [3/10] Enable Remote Access for PostgreSQL ---
echo "[3/10] Enabling remote access for PostgreSQL..."
PG_CONF=$(find /etc/postgresql -name postgresql.conf)
PG_HBA=$(find /etc/postgresql -name pg_hba.conf)
sudo sed -i "s/^#*listen_addresses.*/listen_addresses = '*'/" "$PG_CONF"
MY_IP=$(curl -s ifconfig.me)
echo "host    all             all             $MY_IP/32               md5" | sudo tee -a "$PG_HBA"
sudo systemctl restart postgresql

# --- [4/10] Clone and Build Backend ---
echo "[4/10] Cloning and building Spring Boot backend..."
cd $PROJECT_DIR
[ -d "AAbackend" ] && rm -rf AAbackend
git clone $SPRING_BACKEND_REPO AAbackend
cd AAbackend/server

# Inject DB config and placeholder JWT properties
echo "[5/10] Writing application.properties..."
cat <<EOL > src/main/resources/application.properties
spring.datasource.url=jdbc:postgresql://localhost:5432/$DB_NAME
spring.datasource.username=$DB_USER
spring.datasource.password=$DB_PASS
spring.jpa.hibernate.ddl-auto=update
server.port=8080
jwt.secret=\${jwt.secret}
jwt.expirationMs=\${jwt.expirationMs}
cors.allowed-origin-patterns=\${cors.allowed-origin-patterns}
EOL

mvn clean package -DskipTests -Dmaven.compiler.release=17

# --- [6/10] Create systemd service for backend ---
echo "[6/10] Creating systemd service for backend with -D injection..."
cat <<EOL | sudo tee /etc/systemd/system/aabackend.service
[Unit]
Description=AyurAyush Spring Boot Backend
After=network.target

[Service]
User=root
WorkingDirectory=$PROJECT_DIR/AAbackend/server
ExecStart=/usr/bin/java \\
  -Djwt.secret=$JWT_SECRET \\
  -Djwt.expirationMs=$JWT_EXPIRATION_MS \\
  -Dcors.allowed-origin-patterns=$CORS_ALLOWED_ORIGIN_PATTERNS \\
  -jar $PROJECT_DIR/AAbackend/server/target/server-0.0.1-SNAPSHOT.jar
SuccessExitStatus=143
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOL

sudo systemctl daemon-reload
sudo systemctl enable aabackend
sudo systemctl restart aabackend

# --- [7/10] Install Flutter ---
echo "[7/10] Installing Flutter SDK..."
cd $PROJECT_DIR
[ -d "flutter" ] && rm -rf flutter
git clone https://github.com/flutter/flutter.git -b stable
export PATH="$PROJECT_DIR/flutter/bin:$PATH"
echo 'export PATH="/root/flutter/bin:$PATH"' >> ~/.bashrc
flutter doctor

# --- [8/10] Build Flutter Frontend ---
echo "[8/10] Building Flutter web frontend..."
cd $PROJECT_DIR
[ -d "AAfrontend" ] && rm -rf AAfrontend
git clone $FLUTTER_FRONTEND_REPO AAfrontend
cd AAfrontend/ayurayush_new
flutter pub get
flutter build web

# --- [9/10] Deploy Flutter Web to NGINX ---
echo "[9/10] Deploying frontend to NGINX..."
sudo rm -rf /var/www/html/*
sudo cp -r build/web/* /var/www/html/
sudo chown -R www-data:www-data /var/www/html/

# --- [10/10] Configure NGINX ---
echo "[10/10] Configuring NGINX reverse proxy..."
cat <<EOL | sudo tee /etc/nginx/sites-available/default
server {
    listen 80;
    server_name _;

    root /var/www/html;
    index index.html;

    location / {
        try_files \$uri \$uri/ /index.html;
    }

    location /api/ {
        proxy_pass http://localhost:8080/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
    }
}
EOL

sudo nginx -t && sudo systemctl restart nginx

# --- Final Status ---
echo "✅ Deployment Complete!"
echo "🌐 Visit: http://$(curl -s ifconfig.me)"
echo "🔐 JWT secret & expiration passed via JVM -D options"
echo "🐘 PostgreSQL: $DB_NAME | User: $DB_USER | Pass: $DB_PASS"
echo "📦 Backend: sudo systemctl status aabackend"
echo "📌 Ensure Azure NSG allows port 5432 for IP: $MY_IP"
echo "📋 New features added: Orders, Appointments, Shipping, Reviews, Admin Actions"

